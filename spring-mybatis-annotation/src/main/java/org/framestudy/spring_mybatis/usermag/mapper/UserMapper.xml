<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 命名空间： 包、 文件夹
	文件夹（命名空间）作用：1.分类  2.避免文件（这里是sql语句）重复  
	就是我们java接口关联
 -->
<mapper namespace="org.framestudy.spring_mybatis.usermag.mapper.UserMapper">	
	
	<!-- 映射map结果集 -->
	<resultMap type="UserInfo" id="userMap">
		<id property="id" column="id" javaType="java.lang.Integer"/>
		<result property="userName" column="user_name" javaType="java.lang.String"/>
		<result property="pwd" column="pwd" javaType="java.lang.String"/>
		<result property="age" column="age" javaType="int"/>
		<result property="loginName" column="login_name" javaType="java.lang.String"/>
	</resultMap>
	
	
	<!-- id属性：定义接口方法的名称  -->
	<insert id="saveUserInfo" useGeneratedKeys="true" keyProperty="id">
		<!-- 在mybatis中取值方式有两种：
			1. #{} 会在参数的两侧添加单引号 ''	编译方式采用预编译
			2. ${} 不会添加单引号	编译方式采用直接采用编译（可能会有sql注入的危险）
		 -->
		insert into t_user (user_name,pwd,age,login_name) values (#{userName},#{pwd},${age},#{loginName})
	</insert>

	<update id="updateUserInfo" parameterType="UserInfo">
		<!-- update t_user set user_name = #{u.userName},pwd=#{u.pwd},age=#{u.age},login_name=#{u.loginName} -->
		
		<!-- set if -->
		update t_user
		<set>
			<if test="u.userName != null">
				user_name = #{u.userName},
			</if>
			<if test="u.pwd != null">
				pwd = #{u.pwd},
			</if>
			<if test="u.age != null">
				age = #{u.age},
			</if>
		</set>
		<where>
			id = #{u.id}
		</where>		
	</update>
	
	<delete id="deleteUserInfo">
		delete from t_user where id=#{id}
	</delete>
	
	<select id="getUserInfoById" resultMap="userMap">
		select * from t_user where id=#{id}
	</select>
	
	<select id="getUserByLoginNameAndPwd" resultMap="userMap">
		<!-- select user_name from t_user where login_name = #{loginName} and pwd = #{pwd} -->
		
		<!-- switch case default 在mybatis中的用法 -->
		<!-- where标签出现的地方会自动添加一个where字符串，并且该标签会自动忽略紧随其后的and或者or -->
		select user_name from t_user
		<where>
			<choose>
				<when test="loginName != null">
					and login_name = #{loginName}
				</when>
				<when test="pwd != null">
					and pwd = #{pwd}
				</when>
				<otherwise>
					1=1
				</otherwise>
			</choose>
		</where>
	</select>

	<!-- 
		resultType与resultMap一样，都是用来映射返回结果集与对象之间的关系
		只不过resultType需要结果集中 字段名 与对象的属性名保持名称一致（解决办法：取别名~）！！
		CONCAT：拼接字符串
	 -->
	<select id="queryUserListByMap" resultType="UserInfo">
		select login_name as loginName,pwd from t_user where user_name like CONCAT(#{map.userName},'%') and age=#{map.age}
	</select>
	
	<!-- 批量新增 语法：insert into 表 （字段） values()()()... -->
	<insert id="batcheSaveUserInfo" parameterType="java.util.List">
		insert into t_user (user_name,pwd,age,login_name) values 
		<foreach collection="users" item="user" separator=",">
			(#{user.userName},#{user.pwd},#{user.age},#{user.loginName})
		</foreach>
	</insert>	
	
	<delete id="batchDeleteUserInfo">
		delete from t_user where id in
		<foreach collection="users" item="user" open="(" close=")" separator=",">
			#{user.id}
		</foreach>
	</delete>
	
	
	<sql id="commonSql">
		<where>
			<if test="map.userName != null">
				and user_name like CONCAT(#{map.userName},'%')
			</if>
			<if test="map.loginName != null">
				and login_name like CONCAT(#{map.loginName},'%')
			</if>
			
			<!-- 静态语句块：将SQL语句中<或>符号，定义为一个普通的字符串，不再作为标签的开始或者结束标记 -->
			<if test="map.age != null">
				<![CDATA[
					and age < #{map.age}
				]]>
			</if>
		</where>
		
		<!-- where if 标签的 等价 trim if 不常用 -->
		<!-- order by 必须要定义在 limit 之前 -->
		<!-- <trim prefix="where" prefixOverrides="and|or" suffix="order by" suffixOverrides="and|or">
			<if test="map.userName != null">
				and user_name like CONCAT(#{map.userName},'%')
			</if>
			<if test="map.loginName != null">
				and login_name like CONCAT(#{map.loginName},'%')
			</if>			
		</trim> -->
	</sql>
	
	<select id="countUserListByMapToPage" resultType="int">
		<!-- 
			没有where查询条件的时候 使用 count(*)最快
			如果有查询条件，使用count(id)最优 
		-->
		select count(*) from t_user
		<!-- where标签出现的地方会自动添加一个where字符串，并且该标签会自动忽略紧随其后的and或者or -->
		<include refid="commonSql"></include>
	</select>
	
	<select id="getUserListByMapToPage" resultMap="userMap">
		select * from t_user
		<include refid="commonSql"></include>
		limit #{map.index},#{map.rows}
	</select>
	
	
	
	

</mapper>